// This file is generated by `checked_arithmetic_gen.sp`. Do not edit manually.
module builtin

import intrinsics

// This functions defined as macros in C, so types are not checked.
// Note that the last parameter defines the type for which the check will be performed,
// that is, if we pass the first two parameters `i32`, and the third pointer to `i8`, then
// the overflow check will be performed for `i8`, and not for `i32`.
extern {
	fn checked_add_with_overflow(a any, b any, c *mut any) -> bool
	fn checked_sub_with_overflow(a any, b any, c *mut any) -> bool
	fn checked_mul_with_overflow(a any, b any, c *mut any) -> bool
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u u8) panic_add(v u8) -> u8 {
	mut res := 0 as u8
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `u8` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u u8) panic_sub(v u8) -> u8 {
	mut res := 0 as u8
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `u8` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u u8) panic_mul(v u8) -> u8 {
	mut res := 0 as u8
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `u8` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u u16) panic_add(v u16) -> u16 {
	mut res := 0 as u16
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `u16` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u u16) panic_sub(v u16) -> u16 {
	mut res := 0 as u16
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `u16` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u u16) panic_mul(v u16) -> u16 {
	mut res := 0 as u16
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `u16` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u u32) panic_add(v u32) -> u32 {
	mut res := 0 as u32
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `u32` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u u32) panic_sub(v u32) -> u32 {
	mut res := 0 as u32
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `u32` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u u32) panic_mul(v u32) -> u32 {
	mut res := 0 as u32
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `u32` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u usize) panic_add(v usize) -> usize {
	mut res := 0 as usize
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `usize` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u usize) panic_sub(v usize) -> usize {
	mut res := 0 as usize
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `usize` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u usize) panic_mul(v usize) -> usize {
	mut res := 0 as usize
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `usize` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u u64) panic_add(v u64) -> u64 {
	mut res := 0 as u64
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `u64` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u u64) panic_sub(v u64) -> u64 {
	mut res := 0 as u64
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `u64` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u u64) panic_mul(v u64) -> u64 {
	mut res := 0 as u64
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `u64` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u i8) panic_add(v i8) -> i8 {
	mut res := 0 as i8
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `i8` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u i8) panic_sub(v i8) -> i8 {
	mut res := 0 as i8
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `i8` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u i8) panic_mul(v i8) -> i8 {
	mut res := 0 as i8
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `i8` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u i16) panic_add(v i16) -> i16 {
	mut res := 0 as i16
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `i16` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u i16) panic_sub(v i16) -> i16 {
	mut res := 0 as i16
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `i16` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u i16) panic_mul(v i16) -> i16 {
	mut res := 0 as i16
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `i16` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u i32) panic_add(v i32) -> i32 {
	mut res := 0 as i32
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `i32` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u i32) panic_sub(v i32) -> i32 {
	mut res := 0 as i32
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `i32` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u i32) panic_mul(v i32) -> i32 {
	mut res := 0 as i32
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `i32` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u isize) panic_add(v isize) -> isize {
	mut res := 0 as isize
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `isize` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u isize) panic_sub(v isize) -> isize {
	mut res := 0 as isize
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `isize` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u isize) panic_mul(v isize) -> isize {
	mut res := 0 as isize
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `isize` type")
	}
	return res
}

// panic_add is checked integer addition. If `u` + `v` would overflow,
// function panics, otherwise it returns result of addition.
#[track_caller]
pub fn (u i64) panic_add(v i64) -> i64 {
	mut res := 0 as i64
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		panic("`${u} + ${v}` causes overflow of `i64` type")
	}
	return res
}

// panic_sub is checked integer subtraction. If `u` - `v` would overflow,
// function panics, otherwise it returns result of subtraction.
#[track_caller]
pub fn (u i64) panic_sub(v i64) -> i64 {
	mut res := 0 as i64
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		panic("`${u} - ${v}` causes overflow of `i64` type")
	}
	return res
}

// panic_mul is checked integer multiplication. If `u` * `v` would overflow,
// function panics, otherwise it returns result of multiplication.
#[track_caller]
pub fn (u i64) panic_mul(v i64) -> i64 {
	mut res := 0 as i64
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		panic("`${u} * ${v}` causes overflow of `i64` type")
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u u8) checked_add(v u8) -> ?u8 {
	mut res := 0 as u8
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u u8) checked_sub(v u8) -> ?u8 {
	mut res := 0 as u8
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u u8) checked_mul(v u8) -> ?u8 {
	mut res := 0 as u8
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u u16) checked_add(v u16) -> ?u16 {
	mut res := 0 as u16
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u u16) checked_sub(v u16) -> ?u16 {
	mut res := 0 as u16
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u u16) checked_mul(v u16) -> ?u16 {
	mut res := 0 as u16
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u u32) checked_add(v u32) -> ?u32 {
	mut res := 0 as u32
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u u32) checked_sub(v u32) -> ?u32 {
	mut res := 0 as u32
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u u32) checked_mul(v u32) -> ?u32 {
	mut res := 0 as u32
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u usize) checked_add(v usize) -> ?usize {
	mut res := 0 as usize
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u usize) checked_sub(v usize) -> ?usize {
	mut res := 0 as usize
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u usize) checked_mul(v usize) -> ?usize {
	mut res := 0 as usize
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u u64) checked_add(v u64) -> ?u64 {
	mut res := 0 as u64
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u u64) checked_sub(v u64) -> ?u64 {
	mut res := 0 as u64
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u u64) checked_mul(v u64) -> ?u64 {
	mut res := 0 as u64
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u i8) checked_add(v i8) -> ?i8 {
	mut res := 0 as i8
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u i8) checked_sub(v i8) -> ?i8 {
	mut res := 0 as i8
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u i8) checked_mul(v i8) -> ?i8 {
	mut res := 0 as i8
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u i16) checked_add(v i16) -> ?i16 {
	mut res := 0 as i16
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u i16) checked_sub(v i16) -> ?i16 {
	mut res := 0 as i16
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u i16) checked_mul(v i16) -> ?i16 {
	mut res := 0 as i16
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u i32) checked_add(v i32) -> ?i32 {
	mut res := 0 as i32
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u i32) checked_sub(v i32) -> ?i32 {
	mut res := 0 as i32
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u i32) checked_mul(v i32) -> ?i32 {
	mut res := 0 as i32
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u isize) checked_add(v isize) -> ?isize {
	mut res := 0 as isize
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u isize) checked_sub(v isize) -> ?isize {
	mut res := 0 as isize
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u isize) checked_mul(v isize) -> ?isize {
	mut res := 0 as isize
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_add is checked integer addition. If `u` + `v` would overflow,
// function returns `none`, otherwise it returns result of addition.
pub fn (u i64) checked_add(v i64) -> ?i64 {
	mut res := 0 as i64
	if intrinsics.unlikely(checked_add_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns `none`, otherwise it returns result of subtraction.
pub fn (u i64) checked_sub(v i64) -> ?i64 {
	mut res := 0 as i64
	if intrinsics.unlikely(checked_sub_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// checked_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns `none`, otherwise it returns result of multiplication.
pub fn (u i64) checked_mul(v i64) -> ?i64 {
	mut res := 0 as i64
	if intrinsics.unlikely(checked_mul_with_overflow(u, v, &mut res)) {
		return none
	}
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `u8`.
pub fn (u u8) wrapping_add(v u8) -> u8 {
	mut res := 0 as u8
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `u8`.
pub fn (u u8) wrapping_sub(v u8) -> u8 {
	mut res := 0 as u8
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `u8`.
pub fn (u u8) wrapping_mul(v u8) -> u8 {
	mut res := 0 as u8
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `u16`.
pub fn (u u16) wrapping_add(v u16) -> u16 {
	mut res := 0 as u16
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `u16`.
pub fn (u u16) wrapping_sub(v u16) -> u16 {
	mut res := 0 as u16
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `u16`.
pub fn (u u16) wrapping_mul(v u16) -> u16 {
	mut res := 0 as u16
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `u32`.
pub fn (u u32) wrapping_add(v u32) -> u32 {
	mut res := 0 as u32
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `u32`.
pub fn (u u32) wrapping_sub(v u32) -> u32 {
	mut res := 0 as u32
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `u32`.
pub fn (u u32) wrapping_mul(v u32) -> u32 {
	mut res := 0 as u32
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `usize`.
pub fn (u usize) wrapping_add(v usize) -> usize {
	mut res := 0 as usize
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `usize`.
pub fn (u usize) wrapping_sub(v usize) -> usize {
	mut res := 0 as usize
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `usize`.
pub fn (u usize) wrapping_mul(v usize) -> usize {
	mut res := 0 as usize
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `u64`.
pub fn (u u64) wrapping_add(v u64) -> u64 {
	mut res := 0 as u64
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `u64`.
pub fn (u u64) wrapping_sub(v u64) -> u64 {
	mut res := 0 as u64
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `u64`.
pub fn (u u64) wrapping_mul(v u64) -> u64 {
	mut res := 0 as u64
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `i8`.
pub fn (u i8) wrapping_add(v i8) -> i8 {
	mut res := 0 as i8
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `i8`.
pub fn (u i8) wrapping_sub(v i8) -> i8 {
	mut res := 0 as i8
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `i8`.
pub fn (u i8) wrapping_mul(v i8) -> i8 {
	mut res := 0 as i8
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `i16`.
pub fn (u i16) wrapping_add(v i16) -> i16 {
	mut res := 0 as i16
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `i16`.
pub fn (u i16) wrapping_sub(v i16) -> i16 {
	mut res := 0 as i16
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `i16`.
pub fn (u i16) wrapping_mul(v i16) -> i16 {
	mut res := 0 as i16
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `i32`.
pub fn (u i32) wrapping_add(v i32) -> i32 {
	mut res := 0 as i32
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `i32`.
pub fn (u i32) wrapping_sub(v i32) -> i32 {
	mut res := 0 as i32
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `i32`.
pub fn (u i32) wrapping_mul(v i32) -> i32 {
	mut res := 0 as i32
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `isize`.
pub fn (u isize) wrapping_add(v isize) -> isize {
	mut res := 0 as isize
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `isize`.
pub fn (u isize) wrapping_sub(v isize) -> isize {
	mut res := 0 as isize
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `isize`.
pub fn (u isize) wrapping_mul(v isize) -> isize {
	mut res := 0 as isize
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// wrapping_add is checked integer addition. If `u` + `v` would overflow,
// function returns result of addition modulo maximum value of type `i64`.
pub fn (u i64) wrapping_add(v i64) -> i64 {
	mut res := 0 as i64
	checked_add_with_overflow(u, v, &mut res)
	return res
}

// wrapping_sub is checked integer subtraction. If `u` - `v` would overflow,
// function returns result of subtraction modulo maximum value of type `i64`.
pub fn (u i64) wrapping_sub(v i64) -> i64 {
	mut res := 0 as i64
	checked_sub_with_overflow(u, v, &mut res)
	return res
}

// wrapping_mul is checked integer multiplication. If `u` * `v` would overflow,
// function returns result of multiplication modulo maximum value of type `i64`.
pub fn (u i64) wrapping_mul(v i64) -> i64 {
	mut res := 0 as i64
	checked_mul_with_overflow(u, v, &mut res)
	return res
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u u8) panic_div(v u8) -> u8 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u u8) panic_rem(v u8) -> u8 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u u16) panic_div(v u16) -> u16 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u u16) panic_rem(v u16) -> u16 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u u32) panic_div(v u32) -> u32 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u u32) panic_rem(v u32) -> u32 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u usize) panic_div(v usize) -> usize {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u usize) panic_rem(v usize) -> usize {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u u64) panic_div(v u64) -> u64 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u u64) panic_rem(v u64) -> u64 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u i8) panic_div(v i8) -> i8 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u i8) panic_rem(v i8) -> i8 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u i16) panic_div(v i16) -> i16 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u i16) panic_rem(v i16) -> i16 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u i32) panic_div(v i32) -> i32 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u i32) panic_rem(v i32) -> i32 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u isize) panic_div(v isize) -> isize {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u isize) panic_rem(v isize) -> isize {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// panic_div is checked integer division. If `v` is zero,
// function panics, otherwise it returns result of division.
#[track_caller]
pub fn (u i64) panic_div(v i64) -> i64 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u / v
}

// panic_rem is checked integer remainder. If `v` is zero,
// function panics, otherwise it returns result of remainder.
#[track_caller]
pub fn (u i64) panic_rem(v i64) -> i64 {
	if intrinsics.unlikely(v == 0) {
		panic("division by zero")
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u u8) checked_div(v u8) -> ?u8 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u u8) checked_rem(v u8) -> ?u8 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u u16) checked_div(v u16) -> ?u16 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u u16) checked_rem(v u16) -> ?u16 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u u32) checked_div(v u32) -> ?u32 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u u32) checked_rem(v u32) -> ?u32 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u usize) checked_div(v usize) -> ?usize {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u usize) checked_rem(v usize) -> ?usize {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u u64) checked_div(v u64) -> ?u64 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u u64) checked_rem(v u64) -> ?u64 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u i8) checked_div(v i8) -> ?i8 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u i8) checked_rem(v i8) -> ?i8 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u i16) checked_div(v i16) -> ?i16 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u i16) checked_rem(v i16) -> ?i16 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u i32) checked_div(v i32) -> ?i32 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u i32) checked_rem(v i32) -> ?i32 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u isize) checked_div(v isize) -> ?isize {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u isize) checked_rem(v isize) -> ?isize {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// checked_div is checked integer division. If `v` is zero,
// function returns `none`, otherwise it returns result of division.
pub fn (u i64) checked_div(v i64) -> ?i64 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u / v
}

// checked_rem is checked integer remainder. If `v` is zero,
// function returns `none`, otherwise it returns result of remainder.
pub fn (u i64) checked_rem(v i64) -> ?i64 {
	if intrinsics.unlikely(v == 0) {
		return none
	}
	return u % v
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u16) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u > 255 as u16) {
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u > 255 as u32) {
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u > 65535 as u32) {
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u > 255 as usize) {
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u > 65535 as usize) {
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u > 4294967295 as usize) {
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u > 18446744073709551615 as usize) {
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u > 255 as u64) {
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u > 65535 as u64) {
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u > 4294967295 as u64) {
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u > 18446744073709551615 as u64) {
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u16) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u > 255 as u16) {
		return none
	}
	return u as u8
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u > 255 as u32) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u > 65535 as u32) {
		return none
	}
	return u as u16
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u > 255 as usize) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u > 65535 as usize) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u > 4294967295 as usize) {
		return none
	}
	return u as u32
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u > 18446744073709551615 as usize) {
		return none
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u > 255 as u64) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u > 65535 as u64) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u > 4294967295 as u64) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize`, function returns `none`, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u > 18446744073709551615 as u64) {
		return none
	}
	return u as usize
}

// panic_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i16) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as i16 || u < -128 as i16) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as i32 || u < -128 as i32) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as i32 || u < -32768 as i32) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_rune is checked integer cast. If `u` is not in range of type
// `rune`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_rune() -> rune {
	if intrinsics.unlikely(u > 0x10FFFF as i32 || u < 0 as i32) {
		panic("overflow when casting ${u} to `rune`")
	}
	return u as rune
}

// panic_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as isize || u < -128 as isize) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as isize || u < -32768 as isize) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i32 is checked integer cast. If `u` is not in range of type
// `i32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_i32() -> i32 {
	if intrinsics.unlikely(u > 2147483647 as isize || u < -2147483648 as isize) {
		panic("overflow when casting ${u} to `i32`")
	}
	return u as i32
}

// panic_cast_to_i64 is checked integer cast. If `u` is not in range of type
// `i64`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_i64() -> i64 {
	if intrinsics.unlikely(u > 9223372036854775807 as isize || u < -9223372036854775808 as isize) {
		panic("overflow when casting ${u} to `i64`")
	}
	return u as i64
}

// panic_cast_to_rune is checked integer cast. If `u` is not in range of type
// `rune`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_rune() -> rune {
	if intrinsics.unlikely(u > 0x10FFFF as isize || u < 0 as isize) {
		panic("overflow when casting ${u} to `rune`")
	}
	return u as rune
}

// panic_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as i64 || u < -128 as i64) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as i64 || u < -32768 as i64) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i32 is checked integer cast. If `u` is not in range of type
// `i32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_i32() -> i32 {
	if intrinsics.unlikely(u > 2147483647 as i64 || u < -2147483648 as i64) {
		panic("overflow when casting ${u} to `i32`")
	}
	return u as i32
}

// panic_cast_to_isize is checked integer cast. If `u` is not in range of type
// `isize`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_isize() -> isize {
	if intrinsics.unlikely(u > 9223372036854775807 as i64 || u < -9223372036854775808 as i64) {
		panic("overflow when casting ${u} to `isize`")
	}
	return u as isize
}

// panic_cast_to_rune is checked integer cast. If `u` is not in range of type
// `rune`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_rune() -> rune {
	if intrinsics.unlikely(u > 0x10FFFF as i64 || u < 0 as i64) {
		panic("overflow when casting ${u} to `rune`")
	}
	return u as rune
}

// panic_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as rune || u < -128 as rune) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as rune || u < -32768 as rune) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i32 is checked integer cast. If `u` is not in range of type
// `i32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_i32() -> i32 {
	if intrinsics.unlikely(u > 2147483647 as rune || u < -2147483648 as rune) {
		panic("overflow when casting ${u} to `i32`")
	}
	return u as i32
}

// checked_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u i16) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as i16 || u < -128 as i16) {
		return none
	}
	return u as i8
}

// checked_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as i32 || u < -128 as i32) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as i32 || u < -32768 as i32) {
		return none
	}
	return u as i16
}

// checked_cast_to_rune is checked integer cast. If `u` is not in range of type
// `rune`, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_rune() -> ?rune {
	if intrinsics.unlikely(u > 0x10FFFF as i32 || u < 0 as i32) {
		return none
	}
	return u as rune
}

// checked_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as isize || u < -128 as isize) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as isize || u < -32768 as isize) {
		return none
	}
	return u as i16
}

// checked_cast_to_i32 is checked integer cast. If `u` is not in range of type
// `i32`, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_i32() -> ?i32 {
	if intrinsics.unlikely(u > 2147483647 as isize || u < -2147483648 as isize) {
		return none
	}
	return u as i32
}

// checked_cast_to_i64 is checked integer cast. If `u` is not in range of type
// `i64`, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_i64() -> ?i64 {
	if intrinsics.unlikely(u > 9223372036854775807 as isize || u < -9223372036854775808 as isize) {
		return none
	}
	return u as i64
}

// checked_cast_to_rune is checked integer cast. If `u` is not in range of type
// `rune`, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_rune() -> ?rune {
	if intrinsics.unlikely(u > 0x10FFFF as isize || u < 0 as isize) {
		return none
	}
	return u as rune
}

// checked_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as i64 || u < -128 as i64) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as i64 || u < -32768 as i64) {
		return none
	}
	return u as i16
}

// checked_cast_to_i32 is checked integer cast. If `u` is not in range of type
// `i32`, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_i32() -> ?i32 {
	if intrinsics.unlikely(u > 2147483647 as i64 || u < -2147483648 as i64) {
		return none
	}
	return u as i32
}

// checked_cast_to_isize is checked integer cast. If `u` is not in range of type
// `isize`, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_isize() -> ?isize {
	if intrinsics.unlikely(u > 9223372036854775807 as i64 || u < -9223372036854775808 as i64) {
		return none
	}
	return u as isize
}

// checked_cast_to_rune is checked integer cast. If `u` is not in range of type
// `rune`, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_rune() -> ?rune {
	if intrinsics.unlikely(u > 0x10FFFF as i64 || u < 0 as i64) {
		return none
	}
	return u as rune
}

// checked_cast_to_i8 is checked integer cast. If `u` is not in range of type
// `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as rune || u < -128 as rune) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is not in range of type
// `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as rune || u < -32768 as rune) {
		return none
	}
	return u as i16
}

// checked_cast_to_i32 is checked integer cast. If `u` is not in range of type
// `i32`, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_i32() -> ?i32 {
	if intrinsics.unlikely(u > 2147483647 as rune || u < -2147483648 as rune) {
		return none
	}
	return u as i32
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i8) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		if u < 0 {
			panic("overflow when casting ${u} to `u8`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i8) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		if u < 0 {
			panic("overflow when casting ${u} to `u16`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i8) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		if u < 0 {
			panic("overflow when casting ${u} to `u32`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i8) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		if u < 0 {
			panic("overflow when casting ${u} to `usize`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i8) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		if u < 0 {
			panic("overflow when casting ${u} to `u64`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i16) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		if u < 0 {
			panic("overflow when casting ${u} to `u8`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i16) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		if u < 0 {
			panic("overflow when casting ${u} to `u16`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i16) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		if u < 0 {
			panic("overflow when casting ${u} to `u32`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i16) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		if u < 0 {
			panic("overflow when casting ${u} to `usize`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i16) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		if u < 0 {
			panic("overflow when casting ${u} to `u64`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		if u < 0 {
			panic("overflow when casting ${u} to `u8`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		if u < 0 {
			panic("overflow when casting ${u} to `u16`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		if u < 0 {
			panic("overflow when casting ${u} to `u32`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		if u < 0 {
			panic("overflow when casting ${u} to `usize`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i32) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		if u < 0 {
			panic("overflow when casting ${u} to `u64`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		if u < 0 {
			panic("overflow when casting ${u} to `u8`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		if u < 0 {
			panic("overflow when casting ${u} to `u16`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		if u < 0 {
			panic("overflow when casting ${u} to `u32`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		if u < 0 {
			panic("overflow when casting ${u} to `usize`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u isize) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		if u < 0 {
			panic("overflow when casting ${u} to `u64`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		if u < 0 {
			panic("overflow when casting ${u} to `u8`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		if u < 0 {
			panic("overflow when casting ${u} to `u16`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		if u < 0 {
			panic("overflow when casting ${u} to `u32`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		if u < 0 {
			panic("overflow when casting ${u} to `usize`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u i64) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		if u < 0 {
			panic("overflow when casting ${u} to `u64`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// panic_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_u8() -> u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		if u < 0 {
			panic("overflow when casting ${u} to `u8`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u8`")
	}
	return u as u8
}

// panic_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_u16() -> u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		if u < 0 {
			panic("overflow when casting ${u} to `u16`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u16`")
	}
	return u as u16
}

// panic_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_u32() -> u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		if u < 0 {
			panic("overflow when casting ${u} to `u32`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u32`")
	}
	return u as u32
}

// panic_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_usize() -> usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		if u < 0 {
			panic("overflow when casting ${u} to `usize`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `usize`")
	}
	return u as usize
}

// panic_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u rune) panic_cast_to_u64() -> u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		if u < 0 {
			panic("overflow when casting ${u} to `u64`: casting a negative number to an unsigned type results in loss of information")
		}
		panic("overflow when casting ${u} to `u64`")
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i8) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i8) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i8) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i8) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		return none
	}
	return u as usize
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i8) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		return none
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i16) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i16) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i16) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i16) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		return none
	}
	return u as usize
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i16) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		return none
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		return none
	}
	return u as usize
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i32) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		return none
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		return none
	}
	return u as usize
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u isize) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		return none
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		return none
	}
	return u as usize
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u i64) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		return none
	}
	return u as u64
}

// checked_cast_to_u8 is checked integer cast. If `u` is greater than maximum
// value of type `u8` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_u8() -> ?u8 {
	if intrinsics.unlikely(u < 0 || u as u8 > 255 as u8) {
		return none
	}
	return u as u8
}

// checked_cast_to_u16 is checked integer cast. If `u` is greater than maximum
// value of type `u16` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_u16() -> ?u16 {
	if intrinsics.unlikely(u < 0 || u as u16 > 65535 as u16) {
		return none
	}
	return u as u16
}

// checked_cast_to_u32 is checked integer cast. If `u` is greater than maximum
// value of type `u32` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_u32() -> ?u32 {
	if intrinsics.unlikely(u < 0 || u as u32 > 4294967295 as u32) {
		return none
	}
	return u as u32
}

// checked_cast_to_usize is checked integer cast. If `u` is greater than maximum
// value of type `usize` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_usize() -> ?usize {
	if intrinsics.unlikely(u < 0 || u as usize > 18446744073709551615 as usize) {
		return none
	}
	return u as usize
}

// checked_cast_to_u64 is checked integer cast. If `u` is greater than maximum
// value of type `u64` or negative, function returns `none`, otherwise it returns result of cast.
pub fn (u rune) checked_cast_to_u64() -> ?u64 {
	if intrinsics.unlikely(u < 0 || u as u64 > 18446744073709551615 as u64) {
		return none
	}
	return u as u64
}

// panic_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u8) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as u8) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u16) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as u16) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u16) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as u16) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as u32) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as u32) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i32 is checked integer cast. If `u` is greater than maximum
// value of type `i32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) panic_cast_to_i32() -> i32 {
	if intrinsics.unlikely(u > 2147483647 as u32) {
		panic("overflow when casting ${u} to `i32`")
	}
	return u as i32
}

// panic_cast_to_rune is checked integer cast. If `u` is greater than maximum
// value of type `rune`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u32) panic_cast_to_rune() -> rune {
	if intrinsics.unlikely(u > 0x10FFFF as u32) {
		panic("overflow when casting ${u} to `rune`")
	}
	return u as rune
}

// panic_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as usize) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as usize) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i32 is checked integer cast. If `u` is greater than maximum
// value of type `i32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_i32() -> i32 {
	if intrinsics.unlikely(u > 2147483647 as usize) {
		panic("overflow when casting ${u} to `i32`")
	}
	return u as i32
}

// panic_cast_to_isize is checked integer cast. If `u` is greater than maximum
// value of type `isize`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_isize() -> isize {
	if intrinsics.unlikely(u > 9223372036854775807 as usize) {
		panic("overflow when casting ${u} to `isize`")
	}
	return u as isize
}

// panic_cast_to_i64 is checked integer cast. If `u` is greater than maximum
// value of type `i64`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_i64() -> i64 {
	if intrinsics.unlikely(u > 9223372036854775807 as usize) {
		panic("overflow when casting ${u} to `i64`")
	}
	return u as i64
}

// panic_cast_to_rune is checked integer cast. If `u` is greater than maximum
// value of type `rune`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u usize) panic_cast_to_rune() -> rune {
	if intrinsics.unlikely(u > 0x10FFFF as usize) {
		panic("overflow when casting ${u} to `rune`")
	}
	return u as rune
}

// panic_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_i8() -> i8 {
	if intrinsics.unlikely(u > 127 as u64) {
		panic("overflow when casting ${u} to `i8`")
	}
	return u as i8
}

// panic_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_i16() -> i16 {
	if intrinsics.unlikely(u > 32767 as u64) {
		panic("overflow when casting ${u} to `i16`")
	}
	return u as i16
}

// panic_cast_to_i32 is checked integer cast. If `u` is greater than maximum
// value of type `i32`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_i32() -> i32 {
	if intrinsics.unlikely(u > 2147483647 as u64) {
		panic("overflow when casting ${u} to `i32`")
	}
	return u as i32
}

// panic_cast_to_isize is checked integer cast. If `u` is greater than maximum
// value of type `isize`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_isize() -> isize {
	if intrinsics.unlikely(u > 9223372036854775807 as u64) {
		panic("overflow when casting ${u} to `isize`")
	}
	return u as isize
}

// panic_cast_to_i64 is checked integer cast. If `u` is greater than maximum
// value of type `i64`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_i64() -> i64 {
	if intrinsics.unlikely(u > 9223372036854775807 as u64) {
		panic("overflow when casting ${u} to `i64`")
	}
	return u as i64
}

// panic_cast_to_rune is checked integer cast. If `u` is greater than maximum
// value of type `rune`, function panics, otherwise it returns result of cast.
#[track_caller]
pub fn (u u64) panic_cast_to_rune() -> rune {
	if intrinsics.unlikely(u > 0x10FFFF as u64) {
		panic("overflow when casting ${u} to `rune`")
	}
	return u as rune
}

// checked_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u u8) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as u8) {
		return none
	}
	return u as i8
}

// checked_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u u16) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as u16) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u u16) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as u16) {
		return none
	}
	return u as i16
}

// checked_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u u32) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as u32) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u u32) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as u32) {
		return none
	}
	return u as i16
}

// checked_cast_to_i32 is checked integer cast. If `u` is greater than maximum
// value of type `i32`, function returns `none`, otherwise it returns result of cast.
pub fn (u u32) checked_cast_to_i32() -> ?i32 {
	if intrinsics.unlikely(u > 2147483647 as u32) {
		return none
	}
	return u as i32
}

// checked_cast_to_rune is checked integer cast. If `u` is greater than maximum
// value of type `rune`, function returns `none`, otherwise it returns result of cast.
pub fn (u u32) checked_cast_to_rune() -> ?rune {
	if intrinsics.unlikely(u > 0x10FFFF as u32) {
		return none
	}
	return u as rune
}

// checked_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u usize) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as usize) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u usize) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as usize) {
		return none
	}
	return u as i16
}

// checked_cast_to_i32 is checked integer cast. If `u` is greater than maximum
// value of type `i32`, function returns `none`, otherwise it returns result of cast.
pub fn (u usize) checked_cast_to_i32() -> ?i32 {
	if intrinsics.unlikely(u > 2147483647 as usize) {
		return none
	}
	return u as i32
}

// checked_cast_to_isize is checked integer cast. If `u` is greater than maximum
// value of type `isize`, function returns `none`, otherwise it returns result of cast.
pub fn (u usize) checked_cast_to_isize() -> ?isize {
	if intrinsics.unlikely(u > 9223372036854775807 as usize) {
		return none
	}
	return u as isize
}

// checked_cast_to_i64 is checked integer cast. If `u` is greater than maximum
// value of type `i64`, function returns `none`, otherwise it returns result of cast.
pub fn (u usize) checked_cast_to_i64() -> ?i64 {
	if intrinsics.unlikely(u > 9223372036854775807 as usize) {
		return none
	}
	return u as i64
}

// checked_cast_to_rune is checked integer cast. If `u` is greater than maximum
// value of type `rune`, function returns `none`, otherwise it returns result of cast.
pub fn (u usize) checked_cast_to_rune() -> ?rune {
	if intrinsics.unlikely(u > 0x10FFFF as usize) {
		return none
	}
	return u as rune
}

// checked_cast_to_i8 is checked integer cast. If `u` is greater than maximum
// value of type `i8`, function returns `none`, otherwise it returns result of cast.
pub fn (u u64) checked_cast_to_i8() -> ?i8 {
	if intrinsics.unlikely(u > 127 as u64) {
		return none
	}
	return u as i8
}

// checked_cast_to_i16 is checked integer cast. If `u` is greater than maximum
// value of type `i16`, function returns `none`, otherwise it returns result of cast.
pub fn (u u64) checked_cast_to_i16() -> ?i16 {
	if intrinsics.unlikely(u > 32767 as u64) {
		return none
	}
	return u as i16
}

// checked_cast_to_i32 is checked integer cast. If `u` is greater than maximum
// value of type `i32`, function returns `none`, otherwise it returns result of cast.
pub fn (u u64) checked_cast_to_i32() -> ?i32 {
	if intrinsics.unlikely(u > 2147483647 as u64) {
		return none
	}
	return u as i32
}

// checked_cast_to_isize is checked integer cast. If `u` is greater than maximum
// value of type `isize`, function returns `none`, otherwise it returns result of cast.
pub fn (u u64) checked_cast_to_isize() -> ?isize {
	if intrinsics.unlikely(u > 9223372036854775807 as u64) {
		return none
	}
	return u as isize
}

// checked_cast_to_i64 is checked integer cast. If `u` is greater than maximum
// value of type `i64`, function returns `none`, otherwise it returns result of cast.
pub fn (u u64) checked_cast_to_i64() -> ?i64 {
	if intrinsics.unlikely(u > 9223372036854775807 as u64) {
		return none
	}
	return u as i64
}

// checked_cast_to_rune is checked integer cast. If `u` is greater than maximum
// value of type `rune`, function returns `none`, otherwise it returns result of cast.
pub fn (u u64) checked_cast_to_rune() -> ?rune {
	if intrinsics.unlikely(u > 0x10FFFF as u64) {
		return none
	}
	return u as rune
}
